server {
  listen 80;
  server_name *.jordondehoog.ca;
  return 301 http://jordondehoog.ca;
}

server {
  listen 443;
  server_name *.jordondehoog.ca;
  return 301 https://jordondehoog.ca;
}

# Staging
server {
  listen 80;
  server_name staging.jordondehoog.ca;

  location / {
    root   /var/www/staging/jordondehoog.ca;
    index index.html
    try_files $uri $uri/ index.html;
  }

  include /data/conf.d/errors.conf;
}

# Production
server {
  listen 443;
  server_name jordondehoog.ca www.jordondehoog.ca;

  root   /var/www/jordondehoog.ca;
  index  index.html;

  gzip on;
  ssl_certificate      /data/secure/ssl/jordondehoog.ca/ssl-unified.crt;
  ssl_certificate_key  /data/secure/ssl/jordondehoog.ca/ssl.key;

  ssl on;
  include /data/secure/ssl.conf;

  location / {
    try_files $uri @prerender;
  }

  location @prerender {
    proxy_set_header X-Prerender-Token YYbCcLPYOOqJLel4wNY6;

    set $prerender 0;
    if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
        set $prerender 1;
    }
    if ($args ~ "_escaped_fragment_") {
        set $prerender 1;
    }
    if ($http_user_agent ~ "Prerender") {
        set $prerender 0;
    }
    if ($uri ~ "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff)") {
        set $prerender 0;
    }

    #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
    resolver 8.8.8.8;

    if ($prerender = 1) {
      #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
      set $prerender "service.prerender.io";
      rewrite .* /$scheme://$host$request_uri? break;
      proxy_pass http://$prerender;
    }
    if ($prerender = 0) {
      rewrite .* /index.html break;
    }
  }
  include /data/conf.d/errors.conf;
}